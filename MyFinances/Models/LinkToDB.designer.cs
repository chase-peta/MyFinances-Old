#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyFinances.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FinancesDB")]
	public partial class LinkToDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBillHistory(BillHistory instance);
    partial void UpdateBillHistory(BillHistory instance);
    partial void DeleteBillHistory(BillHistory instance);
    partial void InsertBill(Bill instance);
    partial void UpdateBill(Bill instance);
    partial void DeleteBill(Bill instance);
    partial void InsertLoanHistory(LoanHistory instance);
    partial void UpdateLoanHistory(LoanHistory instance);
    partial void DeleteLoanHistory(LoanHistory instance);
    partial void InsertLoan(Loan instance);
    partial void UpdateLoan(Loan instance);
    partial void DeleteLoan(Loan instance);
    partial void InsertPaymentType(PaymentType instance);
    partial void UpdatePaymentType(PaymentType instance);
    partial void DeletePaymentType(PaymentType instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public LinkToDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["FinancesDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinkToDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinkToDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinkToDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinkToDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BillHistory> BillHistories
		{
			get
			{
				return this.GetTable<BillHistory>();
			}
		}
		
		public System.Data.Linq.Table<Bill> Bills
		{
			get
			{
				return this.GetTable<Bill>();
			}
		}
		
		public System.Data.Linq.Table<LoanHistory> LoanHistories
		{
			get
			{
				return this.GetTable<LoanHistory>();
			}
		}
		
		public System.Data.Linq.Table<Loan> Loans
		{
			get
			{
				return this.GetTable<Loan>();
			}
		}
		
		public System.Data.Linq.Table<PaymentType> PaymentTypes
		{
			get
			{
				return this.GetTable<PaymentType>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BillHistorys")]
	public partial class BillHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Version;
		
		private System.DateTime _CreationDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private decimal _Amount;
		
		private int _BillId;
		
		private System.DateTime _DatePaid;
		
		private string _Payee;
		
		private int _PaymentTypeId;
		
		private System.Nullable<System.DateTime> _IssueDate;
		
		private EntityRef<Bill> _Bill;
		
		private EntityRef<PaymentType> _PaymentType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnBillIdChanging(int value);
    partial void OnBillIdChanged();
    partial void OnDatePaidChanging(System.DateTime value);
    partial void OnDatePaidChanged();
    partial void OnPayeeChanging(string value);
    partial void OnPayeeChanged();
    partial void OnPaymentTypeIdChanging(int value);
    partial void OnPaymentTypeIdChanged();
    partial void OnIssueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIssueDateChanged();
    #endregion
		
		public BillHistory()
		{
			this._Bill = default(EntityRef<Bill>);
			this._PaymentType = default(EntityRef<PaymentType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(9,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillId", DbType="Int NOT NULL")]
		public int BillId
		{
			get
			{
				return this._BillId;
			}
			set
			{
				if ((this._BillId != value))
				{
					if (this._Bill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillIdChanging(value);
					this.SendPropertyChanging();
					this._BillId = value;
					this.SendPropertyChanged("BillId");
					this.OnBillIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePaid", DbType="Date NOT NULL")]
		public System.DateTime DatePaid
		{
			get
			{
				return this._DatePaid;
			}
			set
			{
				if ((this._DatePaid != value))
				{
					this.OnDatePaidChanging(value);
					this.SendPropertyChanging();
					this._DatePaid = value;
					this.SendPropertyChanged("DatePaid");
					this.OnDatePaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payee", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Payee
		{
			get
			{
				return this._Payee;
			}
			set
			{
				if ((this._Payee != value))
				{
					this.OnPayeeChanging(value);
					this.SendPropertyChanging();
					this._Payee = value;
					this.SendPropertyChanged("Payee");
					this.OnPayeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentTypeId", DbType="Int NOT NULL")]
		public int PaymentTypeId
		{
			get
			{
				return this._PaymentTypeId;
			}
			set
			{
				if ((this._PaymentTypeId != value))
				{
					if (this._PaymentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PaymentTypeId = value;
					this.SendPropertyChanged("PaymentTypeId");
					this.OnPaymentTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueDate", DbType="Date")]
		public System.Nullable<System.DateTime> IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_BillHistory", Storage="_Bill", ThisKey="BillId", OtherKey="Id", IsForeignKey=true)]
		public Bill Bill
		{
			get
			{
				return this._Bill.Entity;
			}
			set
			{
				Bill previousValue = this._Bill.Entity;
				if (((previousValue != value) 
							|| (this._Bill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bill.Entity = null;
						previousValue.BillHistories.Remove(this);
					}
					this._Bill.Entity = value;
					if ((value != null))
					{
						value.BillHistories.Add(this);
						this._BillId = value.Id;
					}
					else
					{
						this._BillId = default(int);
					}
					this.SendPropertyChanged("Bill");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_BillHistory", Storage="_PaymentType", ThisKey="PaymentTypeId", OtherKey="Id", IsForeignKey=true)]
		public PaymentType PaymentType
		{
			get
			{
				return this._PaymentType.Entity;
			}
			set
			{
				PaymentType previousValue = this._PaymentType.Entity;
				if (((previousValue != value) 
							|| (this._PaymentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentType.Entity = null;
						previousValue.BillHistories.Remove(this);
					}
					this._PaymentType.Entity = value;
					if ((value != null))
					{
						value.BillHistories.Add(this);
						this._PaymentTypeId = value.Id;
					}
					else
					{
						this._PaymentTypeId = default(int);
					}
					this.SendPropertyChanged("PaymentType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bills")]
	public partial class Bill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Version;
		
		private System.DateTime _CreationDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private string _Name;
		
		private System.DateTime _DueDate;
		
		private decimal _Amount;
		
		private string _Payee;
		
		private int _PaymentTypeId;
		
		private bool _StaysSame;
		
		private bool _IsActive;
		
		private int _UserId;
		
		private System.Nullable<System.DateTime> _IssueDate;
		
		private bool _Shared;
		
		private EntitySet<BillHistory> _BillHistories;
		
		private EntityRef<PaymentType> _PaymentType;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDueDateChanging(System.DateTime value);
    partial void OnDueDateChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnPayeeChanging(string value);
    partial void OnPayeeChanged();
    partial void OnPaymentTypeIdChanging(int value);
    partial void OnPaymentTypeIdChanged();
    partial void OnStaysSameChanging(bool value);
    partial void OnStaysSameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnIssueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIssueDateChanged();
    partial void OnSharedChanging(bool value);
    partial void OnSharedChanged();
    #endregion
		
		public Bill()
		{
			this._BillHistories = new EntitySet<BillHistory>(new Action<BillHistory>(this.attach_BillHistories), new Action<BillHistory>(this.detach_BillHistories));
			this._PaymentType = default(EntityRef<PaymentType>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueDate", DbType="Date NOT NULL")]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(9,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payee", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Payee
		{
			get
			{
				return this._Payee;
			}
			set
			{
				if ((this._Payee != value))
				{
					this.OnPayeeChanging(value);
					this.SendPropertyChanging();
					this._Payee = value;
					this.SendPropertyChanged("Payee");
					this.OnPayeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentTypeId", DbType="Int NOT NULL")]
		public int PaymentTypeId
		{
			get
			{
				return this._PaymentTypeId;
			}
			set
			{
				if ((this._PaymentTypeId != value))
				{
					if (this._PaymentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PaymentTypeId = value;
					this.SendPropertyChanged("PaymentTypeId");
					this.OnPaymentTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaysSame", DbType="Bit NOT NULL")]
		public bool StaysSame
		{
			get
			{
				return this._StaysSame;
			}
			set
			{
				if ((this._StaysSame != value))
				{
					this.OnStaysSameChanging(value);
					this.SendPropertyChanging();
					this._StaysSame = value;
					this.SendPropertyChanged("StaysSame");
					this.OnStaysSameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueDate", DbType="Date")]
		public System.Nullable<System.DateTime> IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shared", DbType="Bit NOT NULL")]
		public bool Shared
		{
			get
			{
				return this._Shared;
			}
			set
			{
				if ((this._Shared != value))
				{
					this.OnSharedChanging(value);
					this.SendPropertyChanging();
					this._Shared = value;
					this.SendPropertyChanged("Shared");
					this.OnSharedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_BillHistory", Storage="_BillHistories", ThisKey="Id", OtherKey="BillId")]
		public EntitySet<BillHistory> BillHistories
		{
			get
			{
				return this._BillHistories;
			}
			set
			{
				this._BillHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_Bill", Storage="_PaymentType", ThisKey="PaymentTypeId", OtherKey="Id", IsForeignKey=true)]
		public PaymentType PaymentType
		{
			get
			{
				return this._PaymentType.Entity;
			}
			set
			{
				PaymentType previousValue = this._PaymentType.Entity;
				if (((previousValue != value) 
							|| (this._PaymentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentType.Entity = null;
						previousValue.Bills.Remove(this);
					}
					this._PaymentType.Entity = value;
					if ((value != null))
					{
						value.Bills.Add(this);
						this._PaymentTypeId = value.Id;
					}
					else
					{
						this._PaymentTypeId = default(int);
					}
					this.SendPropertyChanged("PaymentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Bill", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Bills.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Bills.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BillHistories(BillHistory entity)
		{
			this.SendPropertyChanging();
			entity.Bill = this;
		}
		
		private void detach_BillHistories(BillHistory entity)
		{
			this.SendPropertyChanging();
			entity.Bill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoanHistorys")]
	public partial class LoanHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Version;
		
		private System.DateTime _CreationDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private decimal _AddPayment;
		
		private decimal _BasicPayment;
		
		private System.DateTime _DatePaid;
		
		private decimal _Escrow;
		
		private decimal _Interest;
		
		private int _LoanId;
		
		private int _PaymentTypeId;
		
		private EntityRef<Loan> _Loan;
		
		private EntityRef<PaymentType> _PaymentType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    partial void OnAddPaymentChanging(decimal value);
    partial void OnAddPaymentChanged();
    partial void OnBasicPaymentChanging(decimal value);
    partial void OnBasicPaymentChanged();
    partial void OnDatePaidChanging(System.DateTime value);
    partial void OnDatePaidChanged();
    partial void OnEscrowChanging(decimal value);
    partial void OnEscrowChanged();
    partial void OnInterestChanging(decimal value);
    partial void OnInterestChanged();
    partial void OnLoanIdChanging(int value);
    partial void OnLoanIdChanged();
    partial void OnPaymentTypeIdChanging(int value);
    partial void OnPaymentTypeIdChanged();
    #endregion
		
		public LoanHistory()
		{
			this._Loan = default(EntityRef<Loan>);
			this._PaymentType = default(EntityRef<PaymentType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddPayment", DbType="Decimal(9,2) NOT NULL")]
		public decimal AddPayment
		{
			get
			{
				return this._AddPayment;
			}
			set
			{
				if ((this._AddPayment != value))
				{
					this.OnAddPaymentChanging(value);
					this.SendPropertyChanging();
					this._AddPayment = value;
					this.SendPropertyChanged("AddPayment");
					this.OnAddPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicPayment", DbType="Decimal(9,2) NOT NULL")]
		public decimal BasicPayment
		{
			get
			{
				return this._BasicPayment;
			}
			set
			{
				if ((this._BasicPayment != value))
				{
					this.OnBasicPaymentChanging(value);
					this.SendPropertyChanging();
					this._BasicPayment = value;
					this.SendPropertyChanged("BasicPayment");
					this.OnBasicPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePaid", DbType="Date NOT NULL")]
		public System.DateTime DatePaid
		{
			get
			{
				return this._DatePaid;
			}
			set
			{
				if ((this._DatePaid != value))
				{
					this.OnDatePaidChanging(value);
					this.SendPropertyChanging();
					this._DatePaid = value;
					this.SendPropertyChanged("DatePaid");
					this.OnDatePaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Escrow", DbType="Decimal(9,2) NOT NULL")]
		public decimal Escrow
		{
			get
			{
				return this._Escrow;
			}
			set
			{
				if ((this._Escrow != value))
				{
					this.OnEscrowChanging(value);
					this.SendPropertyChanging();
					this._Escrow = value;
					this.SendPropertyChanged("Escrow");
					this.OnEscrowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Interest", DbType="Decimal(9,2) NOT NULL")]
		public decimal Interest
		{
			get
			{
				return this._Interest;
			}
			set
			{
				if ((this._Interest != value))
				{
					this.OnInterestChanging(value);
					this.SendPropertyChanging();
					this._Interest = value;
					this.SendPropertyChanged("Interest");
					this.OnInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanId", DbType="Int NOT NULL")]
		public int LoanId
		{
			get
			{
				return this._LoanId;
			}
			set
			{
				if ((this._LoanId != value))
				{
					if (this._Loan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoanIdChanging(value);
					this.SendPropertyChanging();
					this._LoanId = value;
					this.SendPropertyChanged("LoanId");
					this.OnLoanIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentTypeId", DbType="Int NOT NULL")]
		public int PaymentTypeId
		{
			get
			{
				return this._PaymentTypeId;
			}
			set
			{
				if ((this._PaymentTypeId != value))
				{
					if (this._PaymentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PaymentTypeId = value;
					this.SendPropertyChanged("PaymentTypeId");
					this.OnPaymentTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Loan_LoanHistory", Storage="_Loan", ThisKey="LoanId", OtherKey="Id", IsForeignKey=true)]
		public Loan Loan
		{
			get
			{
				return this._Loan.Entity;
			}
			set
			{
				Loan previousValue = this._Loan.Entity;
				if (((previousValue != value) 
							|| (this._Loan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Loan.Entity = null;
						previousValue.LoanHistories.Remove(this);
					}
					this._Loan.Entity = value;
					if ((value != null))
					{
						value.LoanHistories.Add(this);
						this._LoanId = value.Id;
					}
					else
					{
						this._LoanId = default(int);
					}
					this.SendPropertyChanged("Loan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_LoanHistory", Storage="_PaymentType", ThisKey="PaymentTypeId", OtherKey="Id", IsForeignKey=true)]
		public PaymentType PaymentType
		{
			get
			{
				return this._PaymentType.Entity;
			}
			set
			{
				PaymentType previousValue = this._PaymentType.Entity;
				if (((previousValue != value) 
							|| (this._PaymentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentType.Entity = null;
						previousValue.LoanHistories.Remove(this);
					}
					this._PaymentType.Entity = value;
					if ((value != null))
					{
						value.LoanHistories.Add(this);
						this._PaymentTypeId = value.Id;
					}
					else
					{
						this._PaymentTypeId = default(int);
					}
					this.SendPropertyChanged("PaymentType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Loans")]
	public partial class Loan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Version;
		
		private System.DateTime _CreationDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private decimal _AddPayment;
		
		private decimal _Escrow;
		
		private System.DateTime _FirstPaymentDate;
		
		private decimal _InterestRate;

        private decimal _PaymentInterestRate;
		
		private decimal _LoanAmount;
		
		private string _Name;
		
		private int _Term;
		
		private int _PaymentTypeId;
		
		private bool _IsActive;
		
		private int _UserId;
		
		private bool _InterestCompDaily;
		
		private bool _InterestCompMonthly;
		
		private EntitySet<LoanHistory> _LoanHistories;
		
		private EntityRef<PaymentType> _PaymentType;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    partial void OnAddPaymentChanging(decimal value);
    partial void OnAddPaymentChanged();
    partial void OnEscrowChanging(decimal value);
    partial void OnEscrowChanged();
    partial void OnFirstPaymentDateChanging(System.DateTime value);
    partial void OnFirstPaymentDateChanged();
    partial void OnInterestRateChanging(decimal value);
    partial void OnInterestRateChanged();
    partial void OnPaymentInterestRateChanging (decimal value);
    partial void OnPaymentInterestRateChanged ();
    partial void OnLoanAmountChanging(decimal value);
    partial void OnLoanAmountChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTermChanging(int value);
    partial void OnTermChanged();
    partial void OnPaymentTypeIdChanging(int value);
    partial void OnPaymentTypeIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnInterestCompDailyChanging(bool value);
    partial void OnInterestCompDailyChanged();
    partial void OnInterestCompMonthlyChanging(bool value);
    partial void OnInterestCompMonthlyChanged();
    #endregion
		
		public Loan()
		{
			this._LoanHistories = new EntitySet<LoanHistory>(new Action<LoanHistory>(this.attach_LoanHistories), new Action<LoanHistory>(this.detach_LoanHistories));
			this._PaymentType = default(EntityRef<PaymentType>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddPayment", DbType="Decimal(9,2) NOT NULL")]
		public decimal AddPayment
		{
			get
			{
				return this._AddPayment;
			}
			set
			{
				if ((this._AddPayment != value))
				{
					this.OnAddPaymentChanging(value);
					this.SendPropertyChanging();
					this._AddPayment = value;
					this.SendPropertyChanged("AddPayment");
					this.OnAddPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Escrow", DbType="Decimal(9,2) NOT NULL")]
		public decimal Escrow
		{
			get
			{
				return this._Escrow;
			}
			set
			{
				if ((this._Escrow != value))
				{
					this.OnEscrowChanging(value);
					this.SendPropertyChanging();
					this._Escrow = value;
					this.SendPropertyChanged("Escrow");
					this.OnEscrowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstPaymentDate", DbType="Date NOT NULL")]
		public System.DateTime FirstPaymentDate
		{
			get
			{
				return this._FirstPaymentDate;
			}
			set
			{
				if ((this._FirstPaymentDate != value))
				{
					this.OnFirstPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._FirstPaymentDate = value;
					this.SendPropertyChanged("FirstPaymentDate");
					this.OnFirstPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InterestRate", DbType="Decimal(9,5) NOT NULL")]
		public decimal InterestRate
		{
			get
			{
				return this._InterestRate;
			}
			set
			{
				if ((this._InterestRate != value))
				{
					this.OnInterestRateChanging(value);
					this.SendPropertyChanging();
					this._InterestRate = value;
					this.SendPropertyChanged("InterestRate");
					this.OnInterestRateChanged();
				}
			}
		}

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PaymentInterestRate", DbType = "Decimal(9,5) NOT NULL")]
        public decimal PaymentInterestRate
        {
            get
            {
                return this._PaymentInterestRate;
            }
            set
            {
                if ((this._PaymentInterestRate != value))
                {
                    this.OnPaymentInterestRateChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentInterestRate = value;
                    this.SendPropertyChanged("PaymentInterestRate");
                    this.OnPaymentInterestRateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanAmount", DbType="Decimal(9,2) NOT NULL")]
		public decimal LoanAmount
		{
			get
			{
				return this._LoanAmount;
			}
			set
			{
				if ((this._LoanAmount != value))
				{
					this.OnLoanAmountChanging(value);
					this.SendPropertyChanging();
					this._LoanAmount = value;
					this.SendPropertyChanged("LoanAmount");
					this.OnLoanAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Term", DbType="Int NOT NULL")]
		public int Term
		{
			get
			{
				return this._Term;
			}
			set
			{
				if ((this._Term != value))
				{
					this.OnTermChanging(value);
					this.SendPropertyChanging();
					this._Term = value;
					this.SendPropertyChanged("Term");
					this.OnTermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentTypeId", DbType="Int NOT NULL")]
		public int PaymentTypeId
		{
			get
			{
				return this._PaymentTypeId;
			}
			set
			{
				if ((this._PaymentTypeId != value))
				{
					if (this._PaymentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PaymentTypeId = value;
					this.SendPropertyChanged("PaymentTypeId");
					this.OnPaymentTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InterestCompDaily", DbType="Bit NOT NULL")]
		public bool InterestCompDaily
		{
			get
			{
				return this._InterestCompDaily;
			}
			set
			{
				if ((this._InterestCompDaily != value))
				{
					this.OnInterestCompDailyChanging(value);
					this.SendPropertyChanging();
					this._InterestCompDaily = value;
					this.SendPropertyChanged("InterestCompDaily");
					this.OnInterestCompDailyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InterestCompMonthly", DbType="Bit NOT NULL")]
		public bool InterestCompMonthly
		{
			get
			{
				return this._InterestCompMonthly;
			}
			set
			{
				if ((this._InterestCompMonthly != value))
				{
					this.OnInterestCompMonthlyChanging(value);
					this.SendPropertyChanging();
					this._InterestCompMonthly = value;
					this.SendPropertyChanged("InterestCompMonthly");
					this.OnInterestCompMonthlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Loan_LoanHistory", Storage="_LoanHistories", ThisKey="Id", OtherKey="LoanId")]
		public EntitySet<LoanHistory> LoanHistories
		{
			get
			{
				return this._LoanHistories;
			}
			set
			{
				this._LoanHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_Loan", Storage="_PaymentType", ThisKey="PaymentTypeId", OtherKey="Id", IsForeignKey=true)]
		public PaymentType PaymentType
		{
			get
			{
				return this._PaymentType.Entity;
			}
			set
			{
				PaymentType previousValue = this._PaymentType.Entity;
				if (((previousValue != value) 
							|| (this._PaymentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentType.Entity = null;
						previousValue.Loans.Remove(this);
					}
					this._PaymentType.Entity = value;
					if ((value != null))
					{
						value.Loans.Add(this);
						this._PaymentTypeId = value.Id;
					}
					else
					{
						this._PaymentTypeId = default(int);
					}
					this.SendPropertyChanged("PaymentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Loan", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Loans.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Loans.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LoanHistories(LoanHistory entity)
		{
			this.SendPropertyChanging();
			entity.Loan = this;
		}
		
		private void detach_LoanHistories(LoanHistory entity)
		{
			this.SendPropertyChanging();
			entity.Loan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentTypes")]
	public partial class PaymentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Version;
		
		private System.DateTime _CreationDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private string _Name;
		
		private int _PaymentsPerYear;
		
		private EntitySet<BillHistory> _BillHistories;
		
		private EntitySet<Bill> _Bills;
		
		private EntitySet<LoanHistory> _LoanHistories;
		
		private EntitySet<Loan> _Loans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPaymentsPerYearChanging(int value);
    partial void OnPaymentsPerYearChanged();
    #endregion
		
		public PaymentType()
		{
			this._BillHistories = new EntitySet<BillHistory>(new Action<BillHistory>(this.attach_BillHistories), new Action<BillHistory>(this.detach_BillHistories));
			this._Bills = new EntitySet<Bill>(new Action<Bill>(this.attach_Bills), new Action<Bill>(this.detach_Bills));
			this._LoanHistories = new EntitySet<LoanHistory>(new Action<LoanHistory>(this.attach_LoanHistories), new Action<LoanHistory>(this.detach_LoanHistories));
			this._Loans = new EntitySet<Loan>(new Action<Loan>(this.attach_Loans), new Action<Loan>(this.detach_Loans));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentsPerYear", DbType="Int NOT NULL")]
		public int PaymentsPerYear
		{
			get
			{
				return this._PaymentsPerYear;
			}
			set
			{
				if ((this._PaymentsPerYear != value))
				{
					this.OnPaymentsPerYearChanging(value);
					this.SendPropertyChanging();
					this._PaymentsPerYear = value;
					this.SendPropertyChanged("PaymentsPerYear");
					this.OnPaymentsPerYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_BillHistory", Storage="_BillHistories", ThisKey="Id", OtherKey="PaymentTypeId")]
		public EntitySet<BillHistory> BillHistories
		{
			get
			{
				return this._BillHistories;
			}
			set
			{
				this._BillHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_Bill", Storage="_Bills", ThisKey="Id", OtherKey="PaymentTypeId")]
		public EntitySet<Bill> Bills
		{
			get
			{
				return this._Bills;
			}
			set
			{
				this._Bills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_LoanHistory", Storage="_LoanHistories", ThisKey="Id", OtherKey="PaymentTypeId")]
		public EntitySet<LoanHistory> LoanHistories
		{
			get
			{
				return this._LoanHistories;
			}
			set
			{
				this._LoanHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_Loan", Storage="_Loans", ThisKey="Id", OtherKey="PaymentTypeId")]
		public EntitySet<Loan> Loans
		{
			get
			{
				return this._Loans;
			}
			set
			{
				this._Loans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BillHistories(BillHistory entity)
		{
			this.SendPropertyChanging();
			entity.PaymentType = this;
		}
		
		private void detach_BillHistories(BillHistory entity)
		{
			this.SendPropertyChanging();
			entity.PaymentType = null;
		}
		
		private void attach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.PaymentType = this;
		}
		
		private void detach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.PaymentType = null;
		}
		
		private void attach_LoanHistories(LoanHistory entity)
		{
			this.SendPropertyChanging();
			entity.PaymentType = this;
		}
		
		private void detach_LoanHistories(LoanHistory entity)
		{
			this.SendPropertyChanging();
			entity.PaymentType = null;
		}
		
		private void attach_Loans(Loan entity)
		{
			this.SendPropertyChanging();
			entity.PaymentType = this;
		}
		
		private void detach_Loans(Loan entity)
		{
			this.SendPropertyChanging();
			entity.PaymentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Version;
		
		private System.DateTime _CreationDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _Password;
		
		private bool _IsActive;
		
		private EntitySet<Bill> _Bills;
		
		private EntitySet<Loan> _Loans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public User()
		{
			this._Bills = new EntitySet<Bill>(new Action<Bill>(this.attach_Bills), new Action<Bill>(this.detach_Bills));
			this._Loans = new EntitySet<Loan>(new Action<Loan>(this.attach_Loans), new Action<Loan>(this.detach_Loans));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL")]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="Char(128) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Bill", Storage="_Bills", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Bill> Bills
		{
			get
			{
				return this._Bills;
			}
			set
			{
				this._Bills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Loan", Storage="_Loans", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Loan> Loans
		{
			get
			{
				return this._Loans;
			}
			set
			{
				this._Loans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Loans(Loan entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Loans(Loan entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
